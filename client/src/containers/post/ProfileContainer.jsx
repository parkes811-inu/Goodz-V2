import React, { useContext, useEffect, useState } from 'react'
import 'bootstrap/dist/css/bootstrap.min.css';
import { Link, useNavigate } from 'react-router-dom';
import * as follow from '../../apis/post/follow';
import * as post from '../../apis/post/post';
import * as like from '../../apis/post/like';
import * as wish from '../../apis/user/wish';
import BtnWish from  '../../components/common/BtnWish';
import BtnLike from  '../../components/common/BtnLike';
import { Button } from 'react-bootstrap';
import ModalFollow from '../../components/post/ModalFollow';
import BtnFollow from '../../components/post/BtnFollow';
import { LoginContext } from '../../contexts/LoginContextProvider';

const ProfileContainer = ({nickname}) => {

    const navigate = useNavigate();

    // Ïú†Ï†Ä Ï†ïÎ≥¥
    const {userInfo} = useContext(LoginContext);
    let viewer;

    // üë©‚Äçüíº‚≠ï Ïú†Ï†Ä Î°úÍ∑∏Ïù∏
    if (userInfo) {
        viewer = userInfo.userId;
        console.log("Ïú†Ï†ÄÏïÑÏù¥Îîî: " + viewer);
    }
    
    // üîÅ ÌîÑÎ°úÌïÑ Ïú†Ï†Ä
    // const [profileNickname, setprofileNickname] = useState(`${nickname}`)
    const [profileUser, setProfileUser] = useState({});
    const [followers, setFollowers] = useState([]);
    const [followings, setFollowings] = useState([]);
    const [postList, setPostList] = useState([]);

    // üí® ÌîÑÎ°úÌïÑÏú†Ï†Ä + Í≤åÏãúÍ∏Ä functions
    const getPostList = async () => {
        
        try {
            // console.log("Í≤åÏãúÍ∏Ä ÏöîÏ≤≠")
            const response = await post.setProfile(nickname);
            const data = await response.data;
            // console.log(data.profileUser);
            // console.log(data.postList);
            setProfileUser(data.profileUser);
            setPostList(data.postList);
            // setprofileNickname(nickname)
            
        } catch (error) {
            console.error('Í≤åÏãúÍ∏ÄÏùÑ Í∞ÄÏ†∏Ïò§Îäî Ï§ë Ïò§Î•ò Î∞úÏÉù:', error);
        }
    }

    /* üîÅ ÌåîÎ°úÏö∞/ÌåîÎ°úÏûâ Î™®Îã¨ */
    const [mFollower, setMFollower] = useState(false);
    const [mFollowing, setMFollowing] = useState(false);

    /* üí® ÌåîÎ°úÏö∞/ÌåîÎ°úÏûâ + Í≤åÏãúÍ∏Ä functions */
    const getFollowers = async (userId) => {
        if (userId === undefined || userId == null) {
            console.log("Ï°∞ÌöåÌï† ÏïÑÏù¥ÎîîÍ∞Ä Ï°¥Ïû¨ÌïòÏßÄÏïäÏäµÎãàÎã§. - ÎπÑÎ°úÍ∑∏Ïù∏")
            return;
        }
        const response =  await follow.followerList(userId);
        const data = response.data;
        console.log(data);

        setFollowers(data);
    }
    const getFollowings = async (userId) => {
        if (userId === undefined || userId == null) {
            console.log("Ï°∞ÌöåÌï† ÏïÑÏù¥ÎîîÍ∞Ä Ï°¥Ïû¨ÌïòÏßÄÏïäÏäµÎãàÎã§. - ÎπÑÎ°úÍ∑∏Ïù∏")
            return;
        }
        const response =  await follow.followingList(userId);
        const data = response.data;
        console.log(data);
        
        setFollowings(data);
    }

    /* ÌåîÎ°úÏö∞/Ïñ∏Ìåî ÏöîÏ≤≠ */
    // viewer ‚û° follow ÏóêÍ≤å ÌåîÎ°úÏö∞/Ïñ∏Ìåî
    const handleFollow = async(viewerId, userId, isFollowed) => {
        // üë©‚Äçüíº‚ùå ÎπÑ Î°úÍ∑∏Ïù∏ Ïãú
        if (viewerId === undefined || viewerId == null) {
            alert("Î°úÍ∑∏Ïù∏ ÌõÑ Ïù¥Ïö©Í∞ÄÎä•Ìï©ÎãàÎã§. ");
            let confirm = window.confirm("Î°úÍ∑∏Ïù∏ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô ÌïòÏãúÍ≤†ÏäµÎãàÍπå?");

            if (!confirm) { return; }

            navigate("/users/login");
            return;
        }

        const requestData = {
            'userId' : userId,
            'followerId' : viewer
        }

        if (!isFollowed) {
            // viewer --> userId ÌåîÎ°úÏö∞ ÏöîÏ≤≠ 
            alert(viewerId + " --> " + userId + "ÌåîÎ°úÏö∞ ÏöîÏ≤≠")
            const headers = {
                'content-type' : 'application/json'
            }
            const response = await follow.requestFollow(requestData, headers)
            console.log(response.data)
            
        } else {
            // viewer -/-> userId Ïñ∏Ìåî ÏöîÏ≤≠ 
            alert(viewerId + " -/-> " + userId + "Ïñ∏ÌåîÏöîÏ≤≠")
            const response = await follow.unFollow(requestData);
            console.log(response.data);
        }

        // getFollowers();
        // getFollowings();
        getPostList();
    }
    
    /* üíõÏ¢ãÏïÑÏöî */
    const handleLike = async (status, userId, postNo) =>  {

        console.log(status, userId, postNo);

        // üë©‚Äçüíº‚ùå ÎπÑ Î°úÍ∑∏Ïù∏ Ïãú
        if (userId === undefined || userId == null) {
            alert("Î°úÍ∑∏Ïù∏ ÌõÑ Ïù¥Ïö©Í∞ÄÎä•Ìï©ÎãàÎã§. ");
            let confirm = window.confirm("Î°úÍ∑∏Ïù∏ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô ÌïòÏãúÍ≤†ÏäµÎãàÍπå?");

            if (!confirm) { return; }

            navigate("/users/login");
            return;
        }

        // üë©‚Äçüíº‚≠ï Î°úÍ∑∏Ïù∏ Ïãú
        // data
        const likeData = {
            'userId': userId,
            'postNo': postNo
        }
        // Ìó§Îçî
        const headers = {
            'content-type' : 'application/json'
        }
        
        if (!status) {
            // Ï¢ãÏïÑÏöî Îì±Î°ù (false ‚û° true)
            const response = await like.addLike(likeData, headers);
            const data = await response.data;
            console.log(data);

        } else {
            // Ï¢ãÏïÑÏöî ÏÇ≠Ï†ú (true ‚û° false)
            const response = await like.deleteLike(likeData);
            const data = await response.data;
            console.log(data);
        }
        getPostList();
    }
    
    /* üíå Í¥ÄÏã¨ */
    const handleWish = async (status, userId, postNo) =>  {
        console.log(status, userId, postNo);

        // üë©‚Äçüíº‚ùå ÎπÑ Î°úÍ∑∏Ïù∏ Ïãú
        if (userId === undefined || userId == null) {
            alert("Î°úÍ∑∏Ïù∏ ÌõÑ Ïù¥Ïö©Í∞ÄÎä•Ìï©ÎãàÎã§. ");
            let confirm = window.confirm("Î°úÍ∑∏Ïù∏ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô ÌïòÏãúÍ≤†ÏäµÎãàÍπå?");

            if (!confirm) { return; }

            navigate("/users/login");
            return;
        }

        // üë©‚Äçüíº‚≠ï Î°úÍ∑∏Ïù∏ Ïãú
        // data
        const wishData = {
            'userId': userId,
            'parentTable': "post",
            'parentNo': postNo
        }
        // Ìó§Îçî
        const headers = {
            'content-type' : 'application/json'
        }
        
        if (!status) {
            // Í¥ÄÏã¨ Îì±Î°ù (false ‚û° true)
            const response = await wish.addWish(wishData, headers);
            const data = await response.data;
            console.log(data);
    
        } else {
            // Í¥ÄÏã¨ ÏÇ≠Ï†ú (true ‚û° false)
            const response = await wish.deleteWish(wishData);
            const data = await response.data;
            console.log(data);
        }

        getPostList();
    }


    // ‚ùì Hook
    useEffect ( () => {
        getPostList();
    },[])

    useEffect( () => {
        getFollowers(profileUser.userId);   // ÌîÑÎ°úÌïÑ Í≥ÑÏ†ïÏùò ÌåîÎ°úÏõå Ï°∞Ìöå
        getFollowings(profileUser.userId);  // ÌîÑÎ°úÌïÑ Í≥ÑÏ†ïÏùò ÌåîÎ°úÏûâ Ï°∞Ìöå
    }, [postList])

    // LinkÎ•º ÌÜµÌï¥ url Í≤ΩÎ°úÏùò ÏöîÏ≤≠ÌîÑÎ°úÌïÑÏù¥ Îã¨ÎùºÏ°åÏùÑ Îïå, Ïû¨ÏÑ∏ÌåÖÏ≤òÎ¶¨
    useEffect(()=>{
        setMFollower(false);    // Î™®Îã¨Ï∞Ω Îã´Í∏∞
        setMFollowing(false);   // Î™®Îã¨Ï∞Ω Îã´Í∏∞
        getPostList();
    }, [nickname])

    return (
        <>
            {/* <!-- Ïú†Ï†Ä Ï†ïÎ≥¥ --> */}
            <div className="user d-flex justify-content-start justify-content-between align-items-end mt-4">
                <div className="user d-flex justify-content-start mt-4">
                    {/* <!-- ÌîÑÏÇ¨ --> */} 
                    { !profileUser.profileImgNo || profileUser.profileImgNo == null ?
                        <img src="/img/user/basic_social.png" alt="ÌîÑÎ°úÌïÑÏù¥ÎØ∏ÏßÄ" className="profile-img-lg" />
                    :
                        <img src={`/files/${profileUser.profileImgNo}`} alt="ÌîÑÎ°úÌïÑÏù¥ÎØ∏ÏßÄ" className="profile-img-lg"/>
                    }

                    <div className="d-flex flex-column justify-content-center ms-3">
                        <div className="user_nickname_area mb-2 d-flex justify-content-start">
                            {/* <!-- Ïú†Ï†ÄÎãâÎÑ§ÏûÑ --> */}
                            <p className="userNickname fs-2 m-0 text-start">{nickname}</p>

                            {/* <!-- ÌîÑÎ°úÌïÑ Í¥ÄÎ¶¨ Î≤ÑÌäº --> */}
                            {viewer === profileUser.userId ?
                            <div className="d-flex align-items-center justify-content-center">
                                <Link to={'/user/manage_info'} className="btn border-secondary-subtle ms-3"  style={{color: 'rgb(80, 80, 80)', fontSize: 'smaller', width: '100px', height: '30px'}}>
                                    ÌîÑÎ°úÌïÑ Í¥ÄÎ¶¨
                                </Link>
                            </div>
                            :
                            <></>
                            }
                        </div>

                        {/* <!-- ÌåîÎ°úÏõå/ÌåîÎ°úÏûâ Ï†ïÎ≥¥ --> */}
                        <div className="followInfo d-flex text-start">
                            <Button onClick={() => setMFollower(true)} className='btn ps-0 pe-2 py-0'><span>ÌåîÎ°úÏõå {followers.length}</span></Button>
                            <ModalFollow show={mFollower} onHide={() => setMFollower(false)} title={"ÌåîÎ°úÏõå"} followList={followers} handleFollow={handleFollow} />
                            <span className="text-body-tertiary ">|</span>
                            <Button onClick={() => setMFollowing(true)} className='btn ps-2 py-0'><span>ÌåîÎ°úÏûâ {followings.length}</span></Button>
                            <ModalFollow show={mFollowing} onHide={() => setMFollowing(false)} title={"ÌåîÎ°úÏûâ"} followList={followings} handleFollow={handleFollow} />
                        </div>

                    </div>
                </div>
                {viewer === profileUser.userId ?
                    <>
                    {/*  Î≥∏Ïù∏ÌîÑÎ°úÌïÑ ‚û° Í≤åÏãúÍ∏Ä Îì±Î°ù */}
                        <Link to={'/styles/insert'} className="p-0" style={{ color: "black", display: "inline-flex", alignItems: "center", justifyContent: "center", border: "1px solid black", padding: "5px", borderRadius: "4px", textDecoration: "none" }}>
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor" className="size-6" width="24px" height="24px">
                                <path strokeLinecap="round" strokeLinejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
                            </svg>
                        </Link>
                    </>
                    :
                    <>
                    {/* ÌÉÄÏù∏ÌîÑÎ°úÌïÑ ‚û° ÌåîÎ°úÏö∞/ÌåîÎ°úÏûâÎ≤ÑÌäº */}
                        <BtnFollow followInfo={profileUser} handleFollow={handleFollow} position={"m-0"}/>
                        {/* <BtnFollowing /> */}
                    </>
                }
                
            </div>

            <hr className="my-2"></hr>

            {/* <!-- [DB] Í≤åÏãúÍ∏Ä Î∞òÎ≥µ ÏúÑÏπò --> */}
            <div className="row row-cols-1 row-cols-sm-1 row-cols-md-2 row-cols-lg-4 g-3" style={{marginBottom: '70px'}}>
            { !postList || postList.length === 0 ?
            <>
                {/* <!-- Ï°∞ÌöåÎêú Í≤åÏãúÍ∏ÄÏù¥ ÏóÜÎäî Í≤ΩÏö∞ --> */}
                <p className="fw-bold mx-auto text-center text-body-tertiary mt-5">Îì±Î°ùÎêú Ïä§ÌÉÄÏùºÏù¥ ÏóÜÏäµÎãàÎã§!</p>
            </>
            :
            <>
                {/* <!-- Ï°∞ÌöåÎêú Í≤åÏãúÍ∏ÄÏù¥ ÏûàÎäî Í≤ΩÏö∞ --> */}
                {postList.map((post) => (
                    <div className="col">
                        <div className="card border-0">
                            <div className="card-body">
                                {/* <!--[DB] Ïù¥ÎØ∏ÏßÄ --> */}
                                {/* <!-- <a href="/styles/cmmtX"> --> */}
                                <Link to={`/styles/${post.postNo}`}>
                                    <img src={`/files/${post.fileNo}`} alt="Í≤åÏãúÍ∏Ä" style={{width: '100%', borderRadius: '9px'}} />
                                </Link>
                                {/* <!--[DB] Ïä§ÌÅ¨Îû© & ÌïòÌä∏ --> */}
                                <div className="d-flex justify-content-end column-gap-2 mt-2 px-2">
                                    <BtnWish wishCount={post.wishCount} isWished={post.wished} handleWish={handleWish} postNo={post.postNo} />
                                    <BtnLike likeCount={post.likeCount} isLiked={post.liked} handleLike={handleLike} postNo={post.postNo}/>
                                </div>
                            </div>
                        </div>
                    </div>
                ))}
            </>
            }

            </div>
        </>
    )
}

export default ProfileContainer